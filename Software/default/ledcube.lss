
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800260  00800260  00000dda  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b5  00000000  00000000  00000dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e87  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025b  00000000  00000000  00001d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b87  00000000  00000000  00001f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fa4  00000000  00000000  00002d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000820  00000000  00000000  00003d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 05 	call	0xb08	; 0xb08 <main>
  8a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_master_init>:
static inline void SPI_SET_SS()		// ustawienie spi 
{
	PORTB|=(1<<PB4);
  92:	c4 9a       	sbi	0x18, 4	; 24
}

void SPI_master_init()           // ustawienie spi 
{
	SPI_SET_SS();
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPI2X); // tryb master, CLK/2 (podwojna predkosc SPI)
  94:	81 e5       	ldi	r24, 0x51	; 81
  96:	8d b9       	out	0x0d, r24	; 13
	SPSR;
  98:	8e b1       	in	r24, 0x0e	; 14
	SPDR; // skasuj flage SPIF
  9a:	8f b1       	in	r24, 0x0f	; 15
}
  9c:	08 95       	ret

0000009e <SPI_send>:

void SPI_send(uint8_t byte)			// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  9e:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  a0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
  a2:	77 9b       	sbis	0x0e, 7	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <SPI_send+0x4>
	PORTB|=_BV(PB4);
  a6:	c4 9a       	sbi	0x18, 4	; 24
}
  a8:	08 95       	ret

000000aa <SPI_send_no_latch>:

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  aa:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  ac:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <SPI_send_no_latch+0x4>
	
}
  b2:	08 95       	ret

000000b4 <zatrzask>:

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
  b4:	c4 9a       	sbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <zatrzask+0x6>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
  be:	c4 98       	cbi	0x18, 4	; 24
}
  c0:	08 95       	ret

000000c2 <shift_reset>:

void shift_reset()   // ustawienie spi 
{
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  c6:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  c8:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & _BV(SPIF)));
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <shift_reset+0x8>
	PORTB&=~(_BV(PB4));
}

void shift_reset()   // ustawienie spi 
{
	for(int i=0;i<8;i++)
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	91 05       	cpc	r25, r1
  d4:	c1 f7       	brne	.-16     	; 0xc6 <shift_reset+0x4>
	{
		SPI_send_no_latch(0x00);
	}
}
  d6:	08 95       	ret

000000d8 <USART_Init>:
void USART_Init( uint16_t baud){  // inicjalizacja UART
	UBRRH = (uint16_t)(baud>>8);
  d8:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  da:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  e0:	86 e8       	ldi	r24, 0x86	; 134
  e2:	80 bd       	out	0x20, r24	; 32
}
  e4:	08 95       	ret

000000e6 <USART_Transmit>:

void USART_Transmit( char buflen) {		// wysy³anie uart
	while( !(UCSRA & (1<<UDRE)) );
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <USART_Transmit>
	UDR = buflen;
  ea:	8c b9       	out	0x0c, r24	; 12
}
  ec:	08 95       	ret

000000ee <USART_Receive>:
	
unsigned char USART_Receive( void ){ 	// odbieranie uart
    
	while( !(UCSRA & (1<<RXC)) );		
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <USART_Receive>
	return UDR; 
  f2:	8c b1       	in	r24, 0x0c	; 12
}
  f4:	08 95       	ret

000000f6 <znak>:
void znak(char data)
{
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c0 58       	subi	r28, 0x80	; 128
 10c:	d2 40       	sbci	r29, 0x02	; 2
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	{0x00,0x01,0x00,0x00,0x00,0xC0,0x01,0x00},
	{0x00,0x01,0x00,0x00,0xC0,0x00,0x01,0x00},
	{0x00,0x01,0x00,0xC0,0x00,0x00,0x01,0x00},
	{0x00,0x01,0xC0,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 118:	de 01       	movw	r26, r28
 11a:	11 96       	adiw	r26, 0x01	; 1
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	f2 e0       	ldi	r31, 0x02	; 2
 120:	90 e4       	ldi	r25, 0x40	; 64
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	91 50       	subi	r25, 0x01	; 1
 128:	e1 f7       	brne	.-8      	; 0x122 <znak+0x2c>
	{0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 12a:	de 01       	movw	r26, r28
 12c:	af 57       	subi	r26, 0x7F	; 127
 12e:	bf 4f       	sbci	r27, 0xFF	; 255
 130:	e0 ee       	ldi	r30, 0xE0	; 224
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	90 e4       	ldi	r25, 0x40	; 64
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	e1 f7       	brne	.-8      	; 0x136 <znak+0x40>
	{0x00,0x01,0x00,0x00,0x00,0x00,0xC0,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 13e:	de 01       	movw	r26, r28
 140:	af 53       	subi	r26, 0x3F	; 63
 142:	bf 4f       	sbci	r27, 0xFF	; 255
 144:	e0 ea       	ldi	r30, 0xA0	; 160
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	90 e4       	ldi	r25, 0x40	; 64
 14a:	01 90       	ld	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	91 50       	subi	r25, 0x01	; 1
 150:	e1 f7       	brne	.-8      	; 0x14a <znak+0x54>
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00}};
 152:	de 01       	movw	r26, r28
 154:	af 5f       	subi	r26, 0xFF	; 255
 156:	be 4f       	sbci	r27, 0xFE	; 254
 158:	e0 e6       	ldi	r30, 0x60	; 96
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	90 e4       	ldi	r25, 0x40	; 64
 15e:	01 90       	ld	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	91 50       	subi	r25, 0x01	; 1
 164:	e1 f7       	brne	.-8      	; 0x15e <znak+0x68>
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00}};
 166:	de 01       	movw	r26, r28
 168:	af 5b       	subi	r26, 0xBF	; 191
 16a:	be 4f       	sbci	r27, 0xFE	; 254
 16c:	e0 e2       	ldi	r30, 0x20	; 32
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	90 e4       	ldi	r25, 0x40	; 64
 172:	01 90       	ld	r0, Z+
 174:	0d 92       	st	X+, r0
 176:	91 50       	subi	r25, 0x01	; 1
 178:	e1 f7       	brne	.-8      	; 0x172 <znak+0x7c>
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00}};
 17a:	de 01       	movw	r26, r28
 17c:	af 57       	subi	r26, 0x7F	; 127
 17e:	be 4f       	sbci	r27, 0xFE	; 254
 180:	e0 ee       	ldi	r30, 0xE0	; 224
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 e4       	ldi	r25, 0x40	; 64
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	91 50       	subi	r25, 0x01	; 1
 18c:	e1 f7       	brne	.-8      	; 0x186 <znak+0x90>
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 18e:	de 01       	movw	r26, r28
 190:	af 5f       	subi	r26, 0xFF	; 255
 192:	bd 4f       	sbci	r27, 0xFD	; 253
 194:	e0 ea       	ldi	r30, 0xA0	; 160
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	90 e4       	ldi	r25, 0x40	; 64
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	91 50       	subi	r25, 0x01	; 1
 1a0:	e1 f7       	brne	.-8      	; 0x19a <znak+0xa4>
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00}};
 1a2:	de 01       	movw	r26, r28
 1a4:	af 5b       	subi	r26, 0xBF	; 191
 1a6:	bd 4f       	sbci	r27, 0xFD	; 253
 1a8:	e0 e6       	ldi	r30, 0x60	; 96
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	90 e4       	ldi	r25, 0x40	; 64
 1ae:	01 90       	ld	r0, Z+
 1b0:	0d 92       	st	X+, r0
 1b2:	91 50       	subi	r25, 0x01	; 1
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <znak+0xb8>

	int czas=1;
	int petla = 7;

	if (data == '0') {
 1b6:	80 33       	cpi	r24, 0x30	; 48
 1b8:	09 f0       	breq	.+2      	; 0x1bc <znak+0xc6>
 1ba:	6b c0       	rjmp	.+214    	; 0x292 <znak+0x19c>
 1bc:	a0 e0       	ldi	r26, 0x00	; 0
 1be:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(zero[i][k] != 0x00) zero[i][k]=1<<p;
 1c0:	31 e0       	ldi	r19, 0x01	; 1
 1c2:	c3 2e       	mov	r12, r19
 1c4:	d1 2c       	mov	r13, r1

	if (data == '0') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 1c6:	7e 01       	movw	r14, r28
 1c8:	08 94       	sec
 1ca:	e1 1c       	adc	r14, r1
 1cc:	f1 1c       	adc	r15, r1
 1ce:	00 ea       	ldi	r16, 0xA0	; 160
 1d0:	1f e0       	ldi	r17, 0x0F	; 15
 1d2:	54 c0       	rjmp	.+168    	; 0x27c <znak+0x186>
		{
			for(int k=0;k<8;k++)
			{
				if(zero[i][k] != 0x00) zero[i][k]=1<<p;
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	31 96       	adiw	r30, 0x01	; 1
 1e0:	28 30       	cpi	r18, 0x08	; 8
 1e2:	31 05       	cpc	r19, r1
 1e4:	b9 f7       	brne	.-18     	; 0x1d4 <znak+0xde>

	if (data == '0') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ea:	48 30       	cpi	r20, 0x08	; 8
 1ec:	51 05       	cpc	r21, r1
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <znak+0x100>
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	3b c0       	rjmp	.+118    	; 0x26c <znak+0x176>
 1f6:	fa 01       	movw	r30, r20
 1f8:	23 e0       	ldi	r18, 0x03	; 3
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	2a 95       	dec	r18
 200:	e1 f7       	brne	.-8      	; 0x1fa <znak+0x104>
 202:	ee 0d       	add	r30, r14
 204:	ff 1d       	adc	r31, r15
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	e4 cf       	rjmp	.-56     	; 0x1d4 <znak+0xde>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(zero[i][k]);
 20c:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 20e:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 210:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 212:	77 9b       	sbis	0x0e, 7	; 14
 214:	fe cf       	rjmp	.-4      	; 0x212 <znak+0x11c>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 216:	2f 5f       	subi	r18, 0xFF	; 255
 218:	3f 4f       	sbci	r19, 0xFF	; 255
 21a:	31 96       	adiw	r30, 0x01	; 1
 21c:	28 30       	cpi	r18, 0x08	; 8
 21e:	31 05       	cpc	r19, r1
 220:	a9 f7       	brne	.-22     	; 0x20c <znak+0x116>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 222:	c4 9a       	sbi	0x18, 4	; 24
 224:	c8 01       	movw	r24, r16
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <znak+0x130>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 22a:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(zero[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 22c:	c6 01       	movw	r24, r12
 22e:	04 2e       	mov	r0, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <znak+0x140>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <znak+0x13c>
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	c8 01       	movw	r24, r16
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <znak+0x148>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 242:	4f 5f       	subi	r20, 0xFF	; 255
 244:	5f 4f       	sbci	r21, 0xFF	; 255
 246:	48 30       	cpi	r20, 0x08	; 8
 248:	51 05       	cpc	r21, r1
 24a:	59 f0       	breq	.+22     	; 0x262 <znak+0x16c>
 24c:	fa 01       	movw	r30, r20
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	8a 95       	dec	r24
 256:	e1 f7       	brne	.-8      	; 0x250 <znak+0x15a>
 258:	ee 0d       	add	r30, r14
 25a:	ff 1d       	adc	r31, r15
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	d5 cf       	rjmp	.-86     	; 0x20c <znak+0x116>
			{
				if(zero[i][k] != 0x00) zero[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 262:	6f 5f       	subi	r22, 0xFF	; 255
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	67 30       	cpi	r22, 0x07	; 7
 268:	71 05       	cpc	r23, r1
 26a:	19 f0       	breq	.+6      	; 0x272 <znak+0x17c>
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	ed cf       	rjmp	.-38     	; 0x24c <znak+0x156>
	int czas=1;
	int petla = 7;

	if (data == '0') {

	for(int p=0;p<8;p++)
 272:	11 96       	adiw	r26, 0x01	; 1
 274:	a8 30       	cpi	r26, 0x08	; 8
 276:	b1 05       	cpc	r27, r1
 278:	09 f4       	brne	.+2      	; 0x27c <znak+0x186>
 27a:	36 c4       	rjmp	.+2156   	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(zero[i][k] != 0x00) zero[i][k]=1<<p;
 27c:	c6 01       	movw	r24, r12
 27e:	0a 2e       	mov	r0, r26
 280:	02 c0       	rjmp	.+4      	; 0x286 <znak+0x190>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <znak+0x18c>
 28a:	98 2f       	mov	r25, r24
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	b2 cf       	rjmp	.-156    	; 0x1f6 <znak+0x100>
			}
		}
	
	}}

	if (data == '1') {
 292:	81 33       	cpi	r24, 0x31	; 49
 294:	09 f0       	breq	.+2      	; 0x298 <znak+0x1a2>
 296:	9a c0       	rjmp	.+308    	; 0x3cc <znak+0x2d6>
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00}};
 298:	de 01       	movw	r26, r28
 29a:	af 5b       	subi	r26, 0xBF	; 191
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	fd 01       	movw	r30, r26
 2a2:	11 92       	st	Z+, r1
 2a4:	8a 95       	dec	r24
 2a6:	e9 f7       	brne	.-6      	; 0x2a2 <znak+0x1ac>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	fe 01       	movw	r30, r28
 2ac:	ec 5b       	subi	r30, 0xBC	; 188
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 83       	st	Z, r24
 2b2:	fe 01       	movw	r30, r28
 2b4:	e4 5b       	subi	r30, 0xB4	; 180
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
 2ba:	fe 01       	movw	r30, r28
 2bc:	ec 5a       	subi	r30, 0xAC	; 172
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 83       	st	Z, r24
 2c2:	fe 01       	movw	r30, r28
 2c4:	e4 5a       	subi	r30, 0xA4	; 164
 2c6:	ff 4f       	sbci	r31, 0xFF	; 255
 2c8:	80 83       	st	Z, r24
 2ca:	fe 01       	movw	r30, r28
 2cc:	ec 59       	subi	r30, 0x9C	; 156
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 83       	st	Z, r24
 2d2:	fe 01       	movw	r30, r28
 2d4:	e4 59       	subi	r30, 0x94	; 148
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	80 83       	st	Z, r24
 2da:	fe 01       	movw	r30, r28
 2dc:	e2 59       	subi	r30, 0x92	; 146
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 83       	st	Z, r24
 2e2:	fe 01       	movw	r30, r28
 2e4:	ec 58       	subi	r30, 0x8C	; 140
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	80 83       	st	Z, r24
 2ea:	fe 01       	movw	r30, r28
 2ec:	eb 58       	subi	r30, 0x8B	; 139
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	80 83       	st	Z, r24
 2f2:	fe 01       	movw	r30, r28
 2f4:	e4 58       	subi	r30, 0x84	; 132
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	80 83       	st	Z, r24
 2fa:	00 e0       	ldi	r16, 0x00	; 0
 2fc:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 2fe:	31 e0       	ldi	r19, 0x01	; 1
 300:	c3 2e       	mov	r12, r19
 302:	d1 2c       	mov	r13, r1

	if (data == '1') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 304:	7d 01       	movw	r14, r26
 306:	a0 ea       	ldi	r26, 0xA0	; 160
 308:	bf e0       	ldi	r27, 0x0F	; 15
 30a:	55 c0       	rjmp	.+170    	; 0x3b6 <znak+0x2c0>
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 30c:	80 81       	ld	r24, Z
 30e:	81 11       	cpse	r24, r1
 310:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	31 96       	adiw	r30, 0x01	; 1
 318:	28 30       	cpi	r18, 0x08	; 8
 31a:	31 05       	cpc	r19, r1
 31c:	b9 f7       	brne	.-18     	; 0x30c <znak+0x216>

	if (data == '1') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 31e:	4f 5f       	subi	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	48 30       	cpi	r20, 0x08	; 8
 324:	51 05       	cpc	r21, r1
 326:	19 f4       	brne	.+6      	; 0x32e <znak+0x238>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	3b c0       	rjmp	.+118    	; 0x3a4 <znak+0x2ae>
 32e:	fa 01       	movw	r30, r20
 330:	23 e0       	ldi	r18, 0x03	; 3
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	2a 95       	dec	r18
 338:	e1 f7       	brne	.-8      	; 0x332 <znak+0x23c>
 33a:	ee 0d       	add	r30, r14
 33c:	ff 1d       	adc	r31, r15
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	e4 cf       	rjmp	.-56     	; 0x30c <znak+0x216>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(jeden[i][k]);
 344:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 346:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 348:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 34a:	77 9b       	sbis	0x0e, 7	; 14
 34c:	fe cf       	rjmp	.-4      	; 0x34a <znak+0x254>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 34e:	2f 5f       	subi	r18, 0xFF	; 255
 350:	3f 4f       	sbci	r19, 0xFF	; 255
 352:	31 96       	adiw	r30, 0x01	; 1
 354:	28 30       	cpi	r18, 0x08	; 8
 356:	31 05       	cpc	r19, r1
 358:	a9 f7       	brne	.-22     	; 0x344 <znak+0x24e>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 35a:	c4 9a       	sbi	0x18, 4	; 24
 35c:	cd 01       	movw	r24, r26
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <znak+0x268>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 362:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(jeden[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 364:	c6 01       	movw	r24, r12
 366:	04 2e       	mov	r0, r20
 368:	02 c0       	rjmp	.+4      	; 0x36e <znak+0x278>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <znak+0x274>
 372:	85 bb       	out	0x15, r24	; 21
 374:	cd 01       	movw	r24, r26
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <znak+0x280>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 37a:	4f 5f       	subi	r20, 0xFF	; 255
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	48 30       	cpi	r20, 0x08	; 8
 380:	51 05       	cpc	r21, r1
 382:	59 f0       	breq	.+22     	; 0x39a <znak+0x2a4>
 384:	fa 01       	movw	r30, r20
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	ee 0f       	add	r30, r30
 38a:	ff 1f       	adc	r31, r31
 38c:	8a 95       	dec	r24
 38e:	e1 f7       	brne	.-8      	; 0x388 <znak+0x292>
 390:	ee 0d       	add	r30, r14
 392:	ff 1d       	adc	r31, r15
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	d5 cf       	rjmp	.-86     	; 0x344 <znak+0x24e>
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 39a:	6f 5f       	subi	r22, 0xFF	; 255
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	67 30       	cpi	r22, 0x07	; 7
 3a0:	71 05       	cpc	r23, r1
 3a2:	19 f0       	breq	.+6      	; 0x3aa <znak+0x2b4>
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	ed cf       	rjmp	.-38     	; 0x384 <znak+0x28e>
	
	}}

	if (data == '1') {

	for(int p=0;p<8;p++)
 3aa:	0f 5f       	subi	r16, 0xFF	; 255
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
 3ae:	08 30       	cpi	r16, 0x08	; 8
 3b0:	11 05       	cpc	r17, r1
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <znak+0x2c0>
 3b4:	99 c3       	rjmp	.+1842   	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 3b6:	c6 01       	movw	r24, r12
 3b8:	00 2e       	mov	r0, r16
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <znak+0x2ca>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <znak+0x2c6>
 3c4:	98 2f       	mov	r25, r24
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	b1 cf       	rjmp	.-158    	; 0x32e <znak+0x238>
			}
		}
	
	}}

	if (data == '2') {
 3cc:	82 33       	cpi	r24, 0x32	; 50
 3ce:	09 f0       	breq	.+2      	; 0x3d2 <znak+0x2dc>
 3d0:	6c c0       	rjmp	.+216    	; 0x4aa <znak+0x3b4>
 3d2:	a0 e0       	ldi	r26, 0x00	; 0
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	c4 2e       	mov	r12, r20
 3da:	d1 2c       	mov	r13, r1

	if (data == '2') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 3dc:	31 e8       	ldi	r19, 0x81	; 129
 3de:	e3 2e       	mov	r14, r19
 3e0:	f1 2c       	mov	r15, r1
 3e2:	ec 0e       	add	r14, r28
 3e4:	fd 1e       	adc	r15, r29
 3e6:	00 ea       	ldi	r16, 0xA0	; 160
 3e8:	1f e0       	ldi	r17, 0x0F	; 15
 3ea:	54 c0       	rjmp	.+168    	; 0x494 <znak+0x39e>
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 3ec:	80 81       	ld	r24, Z
 3ee:	81 11       	cpse	r24, r1
 3f0:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	31 96       	adiw	r30, 0x01	; 1
 3f8:	28 30       	cpi	r18, 0x08	; 8
 3fa:	31 05       	cpc	r19, r1
 3fc:	b9 f7       	brne	.-18     	; 0x3ec <znak+0x2f6>

	if (data == '2') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	48 30       	cpi	r20, 0x08	; 8
 404:	51 05       	cpc	r21, r1
 406:	19 f4       	brne	.+6      	; 0x40e <znak+0x318>
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	3b c0       	rjmp	.+118    	; 0x484 <znak+0x38e>
 40e:	fa 01       	movw	r30, r20
 410:	23 e0       	ldi	r18, 0x03	; 3
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	2a 95       	dec	r18
 418:	e1 f7       	brne	.-8      	; 0x412 <znak+0x31c>
 41a:	ee 0d       	add	r30, r14
 41c:	ff 1d       	adc	r31, r15
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	e4 cf       	rjmp	.-56     	; 0x3ec <znak+0x2f6>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(dwa[i][k]);
 424:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 426:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 428:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 42a:	77 9b       	sbis	0x0e, 7	; 14
 42c:	fe cf       	rjmp	.-4      	; 0x42a <znak+0x334>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	31 96       	adiw	r30, 0x01	; 1
 434:	28 30       	cpi	r18, 0x08	; 8
 436:	31 05       	cpc	r19, r1
 438:	a9 f7       	brne	.-22     	; 0x424 <znak+0x32e>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 43a:	c4 9a       	sbi	0x18, 4	; 24
 43c:	c8 01       	movw	r24, r16
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <znak+0x348>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 442:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(dwa[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 444:	c6 01       	movw	r24, r12
 446:	04 2e       	mov	r0, r20
 448:	02 c0       	rjmp	.+4      	; 0x44e <znak+0x358>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <znak+0x354>
 452:	85 bb       	out	0x15, r24	; 21
 454:	c8 01       	movw	r24, r16
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <znak+0x360>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 45a:	4f 5f       	subi	r20, 0xFF	; 255
 45c:	5f 4f       	sbci	r21, 0xFF	; 255
 45e:	48 30       	cpi	r20, 0x08	; 8
 460:	51 05       	cpc	r21, r1
 462:	59 f0       	breq	.+22     	; 0x47a <znak+0x384>
 464:	fa 01       	movw	r30, r20
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <znak+0x372>
 470:	ee 0d       	add	r30, r14
 472:	ff 1d       	adc	r31, r15
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	d5 cf       	rjmp	.-86     	; 0x424 <znak+0x32e>
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	67 30       	cpi	r22, 0x07	; 7
 480:	71 05       	cpc	r23, r1
 482:	19 f0       	breq	.+6      	; 0x48a <znak+0x394>
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	ed cf       	rjmp	.-38     	; 0x464 <znak+0x36e>
	
	}}

	if (data == '2') {

	for(int p=0;p<8;p++)
 48a:	11 96       	adiw	r26, 0x01	; 1
 48c:	a8 30       	cpi	r26, 0x08	; 8
 48e:	b1 05       	cpc	r27, r1
 490:	09 f4       	brne	.+2      	; 0x494 <znak+0x39e>
 492:	2a c3       	rjmp	.+1620   	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 494:	c6 01       	movw	r24, r12
 496:	0a 2e       	mov	r0, r26
 498:	02 c0       	rjmp	.+4      	; 0x49e <znak+0x3a8>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <znak+0x3a4>
 4a2:	98 2f       	mov	r25, r24
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	b2 cf       	rjmp	.-156    	; 0x40e <znak+0x318>
			}
		}
	
	}}

	if (data == '3') {
 4aa:	83 33       	cpi	r24, 0x33	; 51
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <znak+0x3ba>
 4ae:	6c c0       	rjmp	.+216    	; 0x588 <znak+0x492>
 4b0:	a0 e0       	ldi	r26, 0x00	; 0
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	c4 2e       	mov	r12, r20
 4b8:	d1 2c       	mov	r13, r1

	if (data == '3') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 4ba:	31 ec       	ldi	r19, 0xC1	; 193
 4bc:	e3 2e       	mov	r14, r19
 4be:	f1 2c       	mov	r15, r1
 4c0:	ec 0e       	add	r14, r28
 4c2:	fd 1e       	adc	r15, r29
 4c4:	00 ea       	ldi	r16, 0xA0	; 160
 4c6:	1f e0       	ldi	r17, 0x0F	; 15
 4c8:	54 c0       	rjmp	.+168    	; 0x572 <znak+0x47c>
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 4ca:	80 81       	ld	r24, Z
 4cc:	81 11       	cpse	r24, r1
 4ce:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 4d0:	2f 5f       	subi	r18, 0xFF	; 255
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	31 96       	adiw	r30, 0x01	; 1
 4d6:	28 30       	cpi	r18, 0x08	; 8
 4d8:	31 05       	cpc	r19, r1
 4da:	b9 f7       	brne	.-18     	; 0x4ca <znak+0x3d4>

	if (data == '3') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 4dc:	4f 5f       	subi	r20, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	48 30       	cpi	r20, 0x08	; 8
 4e2:	51 05       	cpc	r21, r1
 4e4:	19 f4       	brne	.+6      	; 0x4ec <znak+0x3f6>
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	3b c0       	rjmp	.+118    	; 0x562 <znak+0x46c>
 4ec:	fa 01       	movw	r30, r20
 4ee:	23 e0       	ldi	r18, 0x03	; 3
 4f0:	ee 0f       	add	r30, r30
 4f2:	ff 1f       	adc	r31, r31
 4f4:	2a 95       	dec	r18
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <znak+0x3fa>
 4f8:	ee 0d       	add	r30, r14
 4fa:	ff 1d       	adc	r31, r15
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	e4 cf       	rjmp	.-56     	; 0x4ca <znak+0x3d4>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(trzy[i][k]);
 502:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 504:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 506:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 508:	77 9b       	sbis	0x0e, 7	; 14
 50a:	fe cf       	rjmp	.-4      	; 0x508 <znak+0x412>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 50c:	2f 5f       	subi	r18, 0xFF	; 255
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	31 96       	adiw	r30, 0x01	; 1
 512:	28 30       	cpi	r18, 0x08	; 8
 514:	31 05       	cpc	r19, r1
 516:	a9 f7       	brne	.-22     	; 0x502 <znak+0x40c>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 518:	c4 9a       	sbi	0x18, 4	; 24
 51a:	c8 01       	movw	r24, r16
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <znak+0x426>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 520:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(trzy[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 522:	c6 01       	movw	r24, r12
 524:	04 2e       	mov	r0, r20
 526:	02 c0       	rjmp	.+4      	; 0x52c <znak+0x436>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <znak+0x432>
 530:	85 bb       	out	0x15, r24	; 21
 532:	c8 01       	movw	r24, r16
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <znak+0x43e>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 538:	4f 5f       	subi	r20, 0xFF	; 255
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
 53c:	48 30       	cpi	r20, 0x08	; 8
 53e:	51 05       	cpc	r21, r1
 540:	59 f0       	breq	.+22     	; 0x558 <znak+0x462>
 542:	fa 01       	movw	r30, r20
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	8a 95       	dec	r24
 54c:	e1 f7       	brne	.-8      	; 0x546 <znak+0x450>
 54e:	ee 0d       	add	r30, r14
 550:	ff 1d       	adc	r31, r15
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	d5 cf       	rjmp	.-86     	; 0x502 <znak+0x40c>
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	67 30       	cpi	r22, 0x07	; 7
 55e:	71 05       	cpc	r23, r1
 560:	19 f0       	breq	.+6      	; 0x568 <znak+0x472>
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	ed cf       	rjmp	.-38     	; 0x542 <znak+0x44c>
	
	}}

	if (data == '3') {

	for(int p=0;p<8;p++)
 568:	11 96       	adiw	r26, 0x01	; 1
 56a:	a8 30       	cpi	r26, 0x08	; 8
 56c:	b1 05       	cpc	r27, r1
 56e:	09 f4       	brne	.+2      	; 0x572 <znak+0x47c>
 570:	bb c2       	rjmp	.+1398   	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 572:	c6 01       	movw	r24, r12
 574:	0a 2e       	mov	r0, r26
 576:	02 c0       	rjmp	.+4      	; 0x57c <znak+0x486>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <znak+0x482>
 580:	98 2f       	mov	r25, r24
 582:	40 e0       	ldi	r20, 0x00	; 0
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	b2 cf       	rjmp	.-156    	; 0x4ec <znak+0x3f6>
			}
		}
	
	}}

	if (data == '4') {
 588:	84 33       	cpi	r24, 0x34	; 52
 58a:	09 f0       	breq	.+2      	; 0x58e <znak+0x498>
 58c:	6c c0       	rjmp	.+216    	; 0x666 <znak+0x570>
 58e:	a0 e0       	ldi	r26, 0x00	; 0
 590:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(cztery[i][k] != 0x00) cztery[i][k]=1<<p;
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	c4 2e       	mov	r12, r20
 596:	d1 2c       	mov	r13, r1

	if (data == '4') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 598:	31 e0       	ldi	r19, 0x01	; 1
 59a:	e3 2e       	mov	r14, r19
 59c:	f3 2e       	mov	r15, r19
 59e:	ec 0e       	add	r14, r28
 5a0:	fd 1e       	adc	r15, r29
 5a2:	00 ea       	ldi	r16, 0xA0	; 160
 5a4:	1f e0       	ldi	r17, 0x0F	; 15
 5a6:	54 c0       	rjmp	.+168    	; 0x650 <znak+0x55a>
		{
			for(int k=0;k<8;k++)
			{
				if(cztery[i][k] != 0x00) cztery[i][k]=1<<p;
 5a8:	80 81       	ld	r24, Z
 5aa:	81 11       	cpse	r24, r1
 5ac:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 5ae:	2f 5f       	subi	r18, 0xFF	; 255
 5b0:	3f 4f       	sbci	r19, 0xFF	; 255
 5b2:	31 96       	adiw	r30, 0x01	; 1
 5b4:	28 30       	cpi	r18, 0x08	; 8
 5b6:	31 05       	cpc	r19, r1
 5b8:	b9 f7       	brne	.-18     	; 0x5a8 <znak+0x4b2>

	if (data == '4') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 5ba:	4f 5f       	subi	r20, 0xFF	; 255
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	48 30       	cpi	r20, 0x08	; 8
 5c0:	51 05       	cpc	r21, r1
 5c2:	19 f4       	brne	.+6      	; 0x5ca <znak+0x4d4>
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	3b c0       	rjmp	.+118    	; 0x640 <znak+0x54a>
 5ca:	fa 01       	movw	r30, r20
 5cc:	23 e0       	ldi	r18, 0x03	; 3
 5ce:	ee 0f       	add	r30, r30
 5d0:	ff 1f       	adc	r31, r31
 5d2:	2a 95       	dec	r18
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <znak+0x4d8>
 5d6:	ee 0d       	add	r30, r14
 5d8:	ff 1d       	adc	r31, r15
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	e4 cf       	rjmp	.-56     	; 0x5a8 <znak+0x4b2>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(cztery[i][k]);
 5e0:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 5e2:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 5e4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 5e6:	77 9b       	sbis	0x0e, 7	; 14
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <znak+0x4f0>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	31 96       	adiw	r30, 0x01	; 1
 5f0:	28 30       	cpi	r18, 0x08	; 8
 5f2:	31 05       	cpc	r19, r1
 5f4:	a9 f7       	brne	.-22     	; 0x5e0 <znak+0x4ea>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 5f6:	c4 9a       	sbi	0x18, 4	; 24
 5f8:	c8 01       	movw	r24, r16
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <znak+0x504>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 5fe:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(cztery[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 600:	c6 01       	movw	r24, r12
 602:	04 2e       	mov	r0, r20
 604:	02 c0       	rjmp	.+4      	; 0x60a <znak+0x514>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	0a 94       	dec	r0
 60c:	e2 f7       	brpl	.-8      	; 0x606 <znak+0x510>
 60e:	85 bb       	out	0x15, r24	; 21
 610:	c8 01       	movw	r24, r16
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <znak+0x51c>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 616:	4f 5f       	subi	r20, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255
 61a:	48 30       	cpi	r20, 0x08	; 8
 61c:	51 05       	cpc	r21, r1
 61e:	59 f0       	breq	.+22     	; 0x636 <znak+0x540>
 620:	fa 01       	movw	r30, r20
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	8a 95       	dec	r24
 62a:	e1 f7       	brne	.-8      	; 0x624 <znak+0x52e>
 62c:	ee 0d       	add	r30, r14
 62e:	ff 1d       	adc	r31, r15
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	d5 cf       	rjmp	.-86     	; 0x5e0 <znak+0x4ea>
			{
				if(cztery[i][k] != 0x00) cztery[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	67 30       	cpi	r22, 0x07	; 7
 63c:	71 05       	cpc	r23, r1
 63e:	19 f0       	breq	.+6      	; 0x646 <znak+0x550>
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	50 e0       	ldi	r21, 0x00	; 0
 644:	ed cf       	rjmp	.-38     	; 0x620 <znak+0x52a>
	
	}}

	if (data == '4') {

	for(int p=0;p<8;p++)
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	a8 30       	cpi	r26, 0x08	; 8
 64a:	b1 05       	cpc	r27, r1
 64c:	09 f4       	brne	.+2      	; 0x650 <znak+0x55a>
 64e:	4c c2       	rjmp	.+1176   	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(cztery[i][k] != 0x00) cztery[i][k]=1<<p;
 650:	c6 01       	movw	r24, r12
 652:	0a 2e       	mov	r0, r26
 654:	02 c0       	rjmp	.+4      	; 0x65a <znak+0x564>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <znak+0x560>
 65e:	98 2f       	mov	r25, r24
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	b2 cf       	rjmp	.-156    	; 0x5ca <znak+0x4d4>
			}
		}
	
	}}

	if (data == '5') {
 666:	85 33       	cpi	r24, 0x35	; 53
 668:	09 f0       	breq	.+2      	; 0x66c <znak+0x576>
 66a:	6d c0       	rjmp	.+218    	; 0x746 <znak+0x650>
 66c:	a0 e0       	ldi	r26, 0x00	; 0
 66e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(piec[i][k] != 0x00) piec[i][k]=1<<p;
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	c4 2e       	mov	r12, r20
 674:	d1 2c       	mov	r13, r1

	if (data == '5') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 676:	31 e4       	ldi	r19, 0x41	; 65
 678:	e3 2e       	mov	r14, r19
 67a:	31 e0       	ldi	r19, 0x01	; 1
 67c:	f3 2e       	mov	r15, r19
 67e:	ec 0e       	add	r14, r28
 680:	fd 1e       	adc	r15, r29
 682:	00 ea       	ldi	r16, 0xA0	; 160
 684:	1f e0       	ldi	r17, 0x0F	; 15
 686:	54 c0       	rjmp	.+168    	; 0x730 <znak+0x63a>
		{
			for(int k=0;k<8;k++)
			{
				if(piec[i][k] != 0x00) piec[i][k]=1<<p;
 688:	80 81       	ld	r24, Z
 68a:	81 11       	cpse	r24, r1
 68c:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 68e:	2f 5f       	subi	r18, 0xFF	; 255
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	31 96       	adiw	r30, 0x01	; 1
 694:	28 30       	cpi	r18, 0x08	; 8
 696:	31 05       	cpc	r19, r1
 698:	b9 f7       	brne	.-18     	; 0x688 <znak+0x592>

	if (data == '5') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 69a:	4f 5f       	subi	r20, 0xFF	; 255
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	48 30       	cpi	r20, 0x08	; 8
 6a0:	51 05       	cpc	r21, r1
 6a2:	19 f4       	brne	.+6      	; 0x6aa <znak+0x5b4>
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	3b c0       	rjmp	.+118    	; 0x720 <znak+0x62a>
 6aa:	fa 01       	movw	r30, r20
 6ac:	23 e0       	ldi	r18, 0x03	; 3
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	2a 95       	dec	r18
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <znak+0x5b8>
 6b6:	ee 0d       	add	r30, r14
 6b8:	ff 1d       	adc	r31, r15
 6ba:	20 e0       	ldi	r18, 0x00	; 0
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	e4 cf       	rjmp	.-56     	; 0x688 <znak+0x592>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(piec[i][k]);
 6c0:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 6c2:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 6c4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 6c6:	77 9b       	sbis	0x0e, 7	; 14
 6c8:	fe cf       	rjmp	.-4      	; 0x6c6 <znak+0x5d0>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 6ca:	2f 5f       	subi	r18, 0xFF	; 255
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
 6ce:	31 96       	adiw	r30, 0x01	; 1
 6d0:	28 30       	cpi	r18, 0x08	; 8
 6d2:	31 05       	cpc	r19, r1
 6d4:	a9 f7       	brne	.-22     	; 0x6c0 <znak+0x5ca>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 6d6:	c4 9a       	sbi	0x18, 4	; 24
 6d8:	c8 01       	movw	r24, r16
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <znak+0x5e4>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 6de:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(piec[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 6e0:	c6 01       	movw	r24, r12
 6e2:	04 2e       	mov	r0, r20
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <znak+0x5f4>
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	0a 94       	dec	r0
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <znak+0x5f0>
 6ee:	85 bb       	out	0x15, r24	; 21
 6f0:	c8 01       	movw	r24, r16
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <znak+0x5fc>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 6f6:	4f 5f       	subi	r20, 0xFF	; 255
 6f8:	5f 4f       	sbci	r21, 0xFF	; 255
 6fa:	48 30       	cpi	r20, 0x08	; 8
 6fc:	51 05       	cpc	r21, r1
 6fe:	59 f0       	breq	.+22     	; 0x716 <znak+0x620>
 700:	fa 01       	movw	r30, r20
 702:	83 e0       	ldi	r24, 0x03	; 3
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	8a 95       	dec	r24
 70a:	e1 f7       	brne	.-8      	; 0x704 <znak+0x60e>
 70c:	ee 0d       	add	r30, r14
 70e:	ff 1d       	adc	r31, r15
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	d5 cf       	rjmp	.-86     	; 0x6c0 <znak+0x5ca>
			{
				if(piec[i][k] != 0x00) piec[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 716:	6f 5f       	subi	r22, 0xFF	; 255
 718:	7f 4f       	sbci	r23, 0xFF	; 255
 71a:	67 30       	cpi	r22, 0x07	; 7
 71c:	71 05       	cpc	r23, r1
 71e:	19 f0       	breq	.+6      	; 0x726 <znak+0x630>
 720:	40 e0       	ldi	r20, 0x00	; 0
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	ed cf       	rjmp	.-38     	; 0x700 <znak+0x60a>
	
	}}

	if (data == '5') {

	for(int p=0;p<8;p++)
 726:	11 96       	adiw	r26, 0x01	; 1
 728:	a8 30       	cpi	r26, 0x08	; 8
 72a:	b1 05       	cpc	r27, r1
 72c:	09 f4       	brne	.+2      	; 0x730 <znak+0x63a>
 72e:	dc c1       	rjmp	.+952    	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(piec[i][k] != 0x00) piec[i][k]=1<<p;
 730:	c6 01       	movw	r24, r12
 732:	0a 2e       	mov	r0, r26
 734:	02 c0       	rjmp	.+4      	; 0x73a <znak+0x644>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <znak+0x640>
 73e:	98 2f       	mov	r25, r24
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	b2 cf       	rjmp	.-156    	; 0x6aa <znak+0x5b4>
			}
		}
	
	}}

	if (data == '6') {
 746:	86 33       	cpi	r24, 0x36	; 54
 748:	09 f0       	breq	.+2      	; 0x74c <znak+0x656>
 74a:	6d c0       	rjmp	.+218    	; 0x826 <znak+0x730>
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(szesc[i][k] != 0x00) szesc[i][k]=1<<p;
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	c4 2e       	mov	r12, r20
 754:	d1 2c       	mov	r13, r1

	if (data == '6') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 756:	31 e8       	ldi	r19, 0x81	; 129
 758:	e3 2e       	mov	r14, r19
 75a:	31 e0       	ldi	r19, 0x01	; 1
 75c:	f3 2e       	mov	r15, r19
 75e:	ec 0e       	add	r14, r28
 760:	fd 1e       	adc	r15, r29
 762:	00 ea       	ldi	r16, 0xA0	; 160
 764:	1f e0       	ldi	r17, 0x0F	; 15
 766:	54 c0       	rjmp	.+168    	; 0x810 <znak+0x71a>
		{
			for(int k=0;k<8;k++)
			{
				if(szesc[i][k] != 0x00) szesc[i][k]=1<<p;
 768:	80 81       	ld	r24, Z
 76a:	81 11       	cpse	r24, r1
 76c:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 76e:	2f 5f       	subi	r18, 0xFF	; 255
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	31 96       	adiw	r30, 0x01	; 1
 774:	28 30       	cpi	r18, 0x08	; 8
 776:	31 05       	cpc	r19, r1
 778:	b9 f7       	brne	.-18     	; 0x768 <znak+0x672>

	if (data == '6') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 77a:	4f 5f       	subi	r20, 0xFF	; 255
 77c:	5f 4f       	sbci	r21, 0xFF	; 255
 77e:	48 30       	cpi	r20, 0x08	; 8
 780:	51 05       	cpc	r21, r1
 782:	19 f4       	brne	.+6      	; 0x78a <znak+0x694>
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	3b c0       	rjmp	.+118    	; 0x800 <znak+0x70a>
 78a:	fa 01       	movw	r30, r20
 78c:	23 e0       	ldi	r18, 0x03	; 3
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	2a 95       	dec	r18
 794:	e1 f7       	brne	.-8      	; 0x78e <znak+0x698>
 796:	ee 0d       	add	r30, r14
 798:	ff 1d       	adc	r31, r15
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	e4 cf       	rjmp	.-56     	; 0x768 <znak+0x672>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(szesc[i][k]);
 7a0:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 7a2:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 7a4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 7a6:	77 9b       	sbis	0x0e, 7	; 14
 7a8:	fe cf       	rjmp	.-4      	; 0x7a6 <znak+0x6b0>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	31 96       	adiw	r30, 0x01	; 1
 7b0:	28 30       	cpi	r18, 0x08	; 8
 7b2:	31 05       	cpc	r19, r1
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <znak+0x6aa>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 7b6:	c4 9a       	sbi	0x18, 4	; 24
 7b8:	c8 01       	movw	r24, r16
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <znak+0x6c4>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 7be:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(szesc[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 7c0:	c6 01       	movw	r24, r12
 7c2:	04 2e       	mov	r0, r20
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <znak+0x6d4>
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	0a 94       	dec	r0
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <znak+0x6d0>
 7ce:	85 bb       	out	0x15, r24	; 21
 7d0:	c8 01       	movw	r24, r16
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <znak+0x6dc>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 7d6:	4f 5f       	subi	r20, 0xFF	; 255
 7d8:	5f 4f       	sbci	r21, 0xFF	; 255
 7da:	48 30       	cpi	r20, 0x08	; 8
 7dc:	51 05       	cpc	r21, r1
 7de:	59 f0       	breq	.+22     	; 0x7f6 <znak+0x700>
 7e0:	fa 01       	movw	r30, r20
 7e2:	83 e0       	ldi	r24, 0x03	; 3
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	8a 95       	dec	r24
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <znak+0x6ee>
 7ec:	ee 0d       	add	r30, r14
 7ee:	ff 1d       	adc	r31, r15
 7f0:	20 e0       	ldi	r18, 0x00	; 0
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	d5 cf       	rjmp	.-86     	; 0x7a0 <znak+0x6aa>
			{
				if(szesc[i][k] != 0x00) szesc[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 7f6:	6f 5f       	subi	r22, 0xFF	; 255
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	67 30       	cpi	r22, 0x07	; 7
 7fc:	71 05       	cpc	r23, r1
 7fe:	19 f0       	breq	.+6      	; 0x806 <znak+0x710>
 800:	40 e0       	ldi	r20, 0x00	; 0
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	ed cf       	rjmp	.-38     	; 0x7e0 <znak+0x6ea>
	
	}}

	if (data == '6') {

	for(int p=0;p<8;p++)
 806:	11 96       	adiw	r26, 0x01	; 1
 808:	a8 30       	cpi	r26, 0x08	; 8
 80a:	b1 05       	cpc	r27, r1
 80c:	09 f4       	brne	.+2      	; 0x810 <znak+0x71a>
 80e:	6c c1       	rjmp	.+728    	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(szesc[i][k] != 0x00) szesc[i][k]=1<<p;
 810:	c6 01       	movw	r24, r12
 812:	0a 2e       	mov	r0, r26
 814:	02 c0       	rjmp	.+4      	; 0x81a <znak+0x724>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	0a 94       	dec	r0
 81c:	e2 f7       	brpl	.-8      	; 0x816 <znak+0x720>
 81e:	98 2f       	mov	r25, r24
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	50 e0       	ldi	r21, 0x00	; 0
 824:	b2 cf       	rjmp	.-156    	; 0x78a <znak+0x694>
			}
		}
	
	}}

	if (data == '7') {
 826:	87 33       	cpi	r24, 0x37	; 55
 828:	09 f0       	breq	.+2      	; 0x82c <znak+0x736>
 82a:	7f c0       	rjmp	.+254    	; 0x92a <__stack+0xcb>
	{0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00}};
 82c:	fe 01       	movw	r30, r28
 82e:	ef 53       	subi	r30, 0x3F	; 63
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	80 e4       	ldi	r24, 0x40	; 64
 834:	df 01       	movw	r26, r30
 836:	1d 92       	st	X+, r1
 838:	8a 95       	dec	r24
 83a:	e9 f7       	brne	.-6      	; 0x836 <znak+0x740>
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	86 83       	std	Z+6, r24	; 0x06
 840:	85 87       	std	Z+13, r24	; 0x0d
 842:	84 8b       	std	Z+20, r24	; 0x14
 844:	83 8f       	std	Z+27, r24	; 0x1b
 846:	82 a3       	std	Z+34, r24	; 0x22
 848:	81 a7       	std	Z+41, r24	; 0x29
 84a:	81 ab       	std	Z+49, r24	; 0x31
 84c:	81 af       	std	Z+57, r24	; 0x39
 84e:	82 af       	std	Z+58, r24	; 0x3a
 850:	83 af       	std	Z+59, r24	; 0x3b
 852:	84 af       	std	Z+60, r24	; 0x3c
 854:	85 af       	std	Z+61, r24	; 0x3d
 856:	86 af       	std	Z+62, r24	; 0x3e
 858:	00 e0       	ldi	r16, 0x00	; 0
 85a:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(siedem[i][k] != 0x00) siedem[i][k]=1<<p;
 85c:	31 e0       	ldi	r19, 0x01	; 1
 85e:	c3 2e       	mov	r12, r19
 860:	d1 2c       	mov	r13, r1

	if (data == '7') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 862:	7f 01       	movw	r14, r30
 864:	e0 ea       	ldi	r30, 0xA0	; 160
 866:	ff e0       	ldi	r31, 0x0F	; 15
 868:	55 c0       	rjmp	.+170    	; 0x914 <__stack+0xb5>
		{
			for(int k=0;k<8;k++)
			{
				if(siedem[i][k] != 0x00) siedem[i][k]=1<<p;
 86a:	8c 91       	ld	r24, X
 86c:	81 11       	cpse	r24, r1
 86e:	9c 93       	st	X, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	11 96       	adiw	r26, 0x01	; 1
 876:	28 30       	cpi	r18, 0x08	; 8
 878:	31 05       	cpc	r19, r1
 87a:	b9 f7       	brne	.-18     	; 0x86a <__stack+0xb>

	if (data == '7') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 87c:	4f 5f       	subi	r20, 0xFF	; 255
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	48 30       	cpi	r20, 0x08	; 8
 882:	51 05       	cpc	r21, r1
 884:	19 f4       	brne	.+6      	; 0x88c <__stack+0x2d>
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	3b c0       	rjmp	.+118    	; 0x902 <__stack+0xa3>
 88c:	da 01       	movw	r26, r20
 88e:	23 e0       	ldi	r18, 0x03	; 3
 890:	aa 0f       	add	r26, r26
 892:	bb 1f       	adc	r27, r27
 894:	2a 95       	dec	r18
 896:	e1 f7       	brne	.-8      	; 0x890 <__stack+0x31>
 898:	ae 0d       	add	r26, r14
 89a:	bf 1d       	adc	r27, r15
 89c:	20 e0       	ldi	r18, 0x00	; 0
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	e4 cf       	rjmp	.-56     	; 0x86a <__stack+0xb>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(siedem[i][k]);
 8a2:	8c 91       	ld	r24, X
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 8a4:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 8a6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 8a8:	77 9b       	sbis	0x0e, 7	; 14
 8aa:	fe cf       	rjmp	.-4      	; 0x8a8 <__stack+0x49>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	3f 4f       	sbci	r19, 0xFF	; 255
 8b0:	11 96       	adiw	r26, 0x01	; 1
 8b2:	28 30       	cpi	r18, 0x08	; 8
 8b4:	31 05       	cpc	r19, r1
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__stack+0x43>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 8b8:	c4 9a       	sbi	0x18, 4	; 24
 8ba:	cf 01       	movw	r24, r30
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <__stack+0x5d>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 8c0:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(siedem[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 8c2:	c6 01       	movw	r24, r12
 8c4:	04 2e       	mov	r0, r20
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	0a 94       	dec	r0
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	85 bb       	out	0x15, r24	; 21
 8d2:	cf 01       	movw	r24, r30
 8d4:	01 97       	sbiw	r24, 0x01	; 1
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <__stack+0x75>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 8d8:	4f 5f       	subi	r20, 0xFF	; 255
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	48 30       	cpi	r20, 0x08	; 8
 8de:	51 05       	cpc	r21, r1
 8e0:	59 f0       	breq	.+22     	; 0x8f8 <__stack+0x99>
 8e2:	da 01       	movw	r26, r20
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	aa 0f       	add	r26, r26
 8e8:	bb 1f       	adc	r27, r27
 8ea:	8a 95       	dec	r24
 8ec:	e1 f7       	brne	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	ae 0d       	add	r26, r14
 8f0:	bf 1d       	adc	r27, r15
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	d5 cf       	rjmp	.-86     	; 0x8a2 <__stack+0x43>
			{
				if(siedem[i][k] != 0x00) siedem[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 8f8:	6f 5f       	subi	r22, 0xFF	; 255
 8fa:	7f 4f       	sbci	r23, 0xFF	; 255
 8fc:	67 30       	cpi	r22, 0x07	; 7
 8fe:	71 05       	cpc	r23, r1
 900:	19 f0       	breq	.+6      	; 0x908 <__stack+0xa9>
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	ed cf       	rjmp	.-38     	; 0x8e2 <__stack+0x83>
	
	}}

	if (data == '7') {

	for(int p=0;p<8;p++)
 908:	0f 5f       	subi	r16, 0xFF	; 255
 90a:	1f 4f       	sbci	r17, 0xFF	; 255
 90c:	08 30       	cpi	r16, 0x08	; 8
 90e:	11 05       	cpc	r17, r1
 910:	09 f4       	brne	.+2      	; 0x914 <__stack+0xb5>
 912:	ea c0       	rjmp	.+468    	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(siedem[i][k] != 0x00) siedem[i][k]=1<<p;
 914:	c6 01       	movw	r24, r12
 916:	00 2e       	mov	r0, r16
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	88 0f       	add	r24, r24
 91c:	99 1f       	adc	r25, r25
 91e:	0a 94       	dec	r0
 920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
 922:	98 2f       	mov	r25, r24
 924:	40 e0       	ldi	r20, 0x00	; 0
 926:	50 e0       	ldi	r21, 0x00	; 0
 928:	b1 cf       	rjmp	.-158    	; 0x88c <__stack+0x2d>
			}
		}
	
	}}

	if (data == '8') {
 92a:	88 33       	cpi	r24, 0x38	; 56
 92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0xd1>
 92e:	6d c0       	rjmp	.+218    	; 0xa0a <__stack+0x1ab>
 930:	a0 e0       	ldi	r26, 0x00	; 0
 932:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(osiem[i][k] != 0x00) osiem[i][k]=1<<p;
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	c4 2e       	mov	r12, r20
 938:	d1 2c       	mov	r13, r1

	if (data == '8') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 93a:	31 e0       	ldi	r19, 0x01	; 1
 93c:	e3 2e       	mov	r14, r19
 93e:	32 e0       	ldi	r19, 0x02	; 2
 940:	f3 2e       	mov	r15, r19
 942:	ec 0e       	add	r14, r28
 944:	fd 1e       	adc	r15, r29
 946:	00 ea       	ldi	r16, 0xA0	; 160
 948:	1f e0       	ldi	r17, 0x0F	; 15
 94a:	54 c0       	rjmp	.+168    	; 0x9f4 <__stack+0x195>
		{
			for(int k=0;k<8;k++)
			{
				if(osiem[i][k] != 0x00) osiem[i][k]=1<<p;
 94c:	80 81       	ld	r24, Z
 94e:	81 11       	cpse	r24, r1
 950:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 952:	2f 5f       	subi	r18, 0xFF	; 255
 954:	3f 4f       	sbci	r19, 0xFF	; 255
 956:	31 96       	adiw	r30, 0x01	; 1
 958:	28 30       	cpi	r18, 0x08	; 8
 95a:	31 05       	cpc	r19, r1
 95c:	b9 f7       	brne	.-18     	; 0x94c <__stack+0xed>

	if (data == '8') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 95e:	4f 5f       	subi	r20, 0xFF	; 255
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	48 30       	cpi	r20, 0x08	; 8
 964:	51 05       	cpc	r21, r1
 966:	19 f4       	brne	.+6      	; 0x96e <__stack+0x10f>
 968:	60 e0       	ldi	r22, 0x00	; 0
 96a:	70 e0       	ldi	r23, 0x00	; 0
 96c:	3b c0       	rjmp	.+118    	; 0x9e4 <__stack+0x185>
 96e:	fa 01       	movw	r30, r20
 970:	23 e0       	ldi	r18, 0x03	; 3
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	2a 95       	dec	r18
 978:	e1 f7       	brne	.-8      	; 0x972 <__stack+0x113>
 97a:	ee 0d       	add	r30, r14
 97c:	ff 1d       	adc	r31, r15
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	e4 cf       	rjmp	.-56     	; 0x94c <__stack+0xed>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(osiem[i][k]);
 984:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 986:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 988:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 98a:	77 9b       	sbis	0x0e, 7	; 14
 98c:	fe cf       	rjmp	.-4      	; 0x98a <__stack+0x12b>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 98e:	2f 5f       	subi	r18, 0xFF	; 255
 990:	3f 4f       	sbci	r19, 0xFF	; 255
 992:	31 96       	adiw	r30, 0x01	; 1
 994:	28 30       	cpi	r18, 0x08	; 8
 996:	31 05       	cpc	r19, r1
 998:	a9 f7       	brne	.-22     	; 0x984 <__stack+0x125>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 99a:	c4 9a       	sbi	0x18, 4	; 24
 99c:	c8 01       	movw	r24, r16
 99e:	01 97       	sbiw	r24, 0x01	; 1
 9a0:	f1 f7       	brne	.-4      	; 0x99e <__stack+0x13f>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 9a2:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(osiem[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 9a4:	c6 01       	movw	r24, r12
 9a6:	04 2e       	mov	r0, r20
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <__stack+0x14f>
 9aa:	88 0f       	add	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	0a 94       	dec	r0
 9b0:	e2 f7       	brpl	.-8      	; 0x9aa <__stack+0x14b>
 9b2:	85 bb       	out	0x15, r24	; 21
 9b4:	c8 01       	movw	r24, r16
 9b6:	01 97       	sbiw	r24, 0x01	; 1
 9b8:	f1 f7       	brne	.-4      	; 0x9b6 <__stack+0x157>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 9ba:	4f 5f       	subi	r20, 0xFF	; 255
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	48 30       	cpi	r20, 0x08	; 8
 9c0:	51 05       	cpc	r21, r1
 9c2:	59 f0       	breq	.+22     	; 0x9da <__stack+0x17b>
 9c4:	fa 01       	movw	r30, r20
 9c6:	83 e0       	ldi	r24, 0x03	; 3
 9c8:	ee 0f       	add	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	8a 95       	dec	r24
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <__stack+0x169>
 9d0:	ee 0d       	add	r30, r14
 9d2:	ff 1d       	adc	r31, r15
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	d5 cf       	rjmp	.-86     	; 0x984 <__stack+0x125>
			{
				if(osiem[i][k] != 0x00) osiem[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 9da:	6f 5f       	subi	r22, 0xFF	; 255
 9dc:	7f 4f       	sbci	r23, 0xFF	; 255
 9de:	67 30       	cpi	r22, 0x07	; 7
 9e0:	71 05       	cpc	r23, r1
 9e2:	19 f0       	breq	.+6      	; 0x9ea <__stack+0x18b>
 9e4:	40 e0       	ldi	r20, 0x00	; 0
 9e6:	50 e0       	ldi	r21, 0x00	; 0
 9e8:	ed cf       	rjmp	.-38     	; 0x9c4 <__stack+0x165>
	
	}}

	if (data == '8') {

	for(int p=0;p<8;p++)
 9ea:	11 96       	adiw	r26, 0x01	; 1
 9ec:	a8 30       	cpi	r26, 0x08	; 8
 9ee:	b1 05       	cpc	r27, r1
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <__stack+0x195>
 9f2:	7a c0       	rjmp	.+244    	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(osiem[i][k] != 0x00) osiem[i][k]=1<<p;
 9f4:	c6 01       	movw	r24, r12
 9f6:	0a 2e       	mov	r0, r26
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0x19f>
 9fa:	88 0f       	add	r24, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	0a 94       	dec	r0
 a00:	e2 f7       	brpl	.-8      	; 0x9fa <__stack+0x19b>
 a02:	98 2f       	mov	r25, r24
 a04:	40 e0       	ldi	r20, 0x00	; 0
 a06:	50 e0       	ldi	r21, 0x00	; 0
 a08:	b2 cf       	rjmp	.-156    	; 0x96e <__stack+0x10f>
			}
		}
	
	}}

	if (data == '9') {
 a0a:	89 33       	cpi	r24, 0x39	; 57
 a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x1b1>
 a0e:	6c c0       	rjmp	.+216    	; 0xae8 <__stack+0x289>
 a10:	a0 e0       	ldi	r26, 0x00	; 0
 a12:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dziewiec[i][k] != 0x00) dziewiec[i][k]=1<<p;
 a14:	41 e0       	ldi	r20, 0x01	; 1
 a16:	c4 2e       	mov	r12, r20
 a18:	d1 2c       	mov	r13, r1

	if (data == '9') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 a1a:	31 e4       	ldi	r19, 0x41	; 65
 a1c:	e3 2e       	mov	r14, r19
 a1e:	32 e0       	ldi	r19, 0x02	; 2
 a20:	f3 2e       	mov	r15, r19
 a22:	ec 0e       	add	r14, r28
 a24:	fd 1e       	adc	r15, r29
 a26:	00 ea       	ldi	r16, 0xA0	; 160
 a28:	1f e0       	ldi	r17, 0x0F	; 15
 a2a:	53 c0       	rjmp	.+166    	; 0xad2 <__stack+0x273>
		{
			for(int k=0;k<8;k++)
			{
				if(dziewiec[i][k] != 0x00) dziewiec[i][k]=1<<p;
 a2c:	80 81       	ld	r24, Z
 a2e:	81 11       	cpse	r24, r1
 a30:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 a32:	2f 5f       	subi	r18, 0xFF	; 255
 a34:	3f 4f       	sbci	r19, 0xFF	; 255
 a36:	31 96       	adiw	r30, 0x01	; 1
 a38:	28 30       	cpi	r18, 0x08	; 8
 a3a:	31 05       	cpc	r19, r1
 a3c:	b9 f7       	brne	.-18     	; 0xa2c <__stack+0x1cd>

	if (data == '9') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 a3e:	4f 5f       	subi	r20, 0xFF	; 255
 a40:	5f 4f       	sbci	r21, 0xFF	; 255
 a42:	48 30       	cpi	r20, 0x08	; 8
 a44:	51 05       	cpc	r21, r1
 a46:	19 f4       	brne	.+6      	; 0xa4e <__stack+0x1ef>
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	3b c0       	rjmp	.+118    	; 0xac4 <__stack+0x265>
 a4e:	fa 01       	movw	r30, r20
 a50:	23 e0       	ldi	r18, 0x03	; 3
 a52:	ee 0f       	add	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	2a 95       	dec	r18
 a58:	e1 f7       	brne	.-8      	; 0xa52 <__stack+0x1f3>
 a5a:	ee 0d       	add	r30, r14
 a5c:	ff 1d       	adc	r31, r15
 a5e:	20 e0       	ldi	r18, 0x00	; 0
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	e4 cf       	rjmp	.-56     	; 0xa2c <__stack+0x1cd>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(dziewiec[i][k]);
 a64:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 a66:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 a68:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 a6a:	77 9b       	sbis	0x0e, 7	; 14
 a6c:	fe cf       	rjmp	.-4      	; 0xa6a <__stack+0x20b>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 a6e:	2f 5f       	subi	r18, 0xFF	; 255
 a70:	3f 4f       	sbci	r19, 0xFF	; 255
 a72:	31 96       	adiw	r30, 0x01	; 1
 a74:	28 30       	cpi	r18, 0x08	; 8
 a76:	31 05       	cpc	r19, r1
 a78:	a9 f7       	brne	.-22     	; 0xa64 <__stack+0x205>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 a7a:	c4 9a       	sbi	0x18, 4	; 24
 a7c:	c8 01       	movw	r24, r16
 a7e:	01 97       	sbiw	r24, 0x01	; 1
 a80:	f1 f7       	brne	.-4      	; 0xa7e <__stack+0x21f>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 a82:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(dziewiec[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 a84:	c6 01       	movw	r24, r12
 a86:	04 2e       	mov	r0, r20
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x22f>
 a8a:	88 0f       	add	r24, r24
 a8c:	99 1f       	adc	r25, r25
 a8e:	0a 94       	dec	r0
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <__stack+0x22b>
 a92:	85 bb       	out	0x15, r24	; 21
 a94:	c8 01       	movw	r24, r16
 a96:	01 97       	sbiw	r24, 0x01	; 1
 a98:	f1 f7       	brne	.-4      	; 0xa96 <__stack+0x237>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 a9a:	4f 5f       	subi	r20, 0xFF	; 255
 a9c:	5f 4f       	sbci	r21, 0xFF	; 255
 a9e:	48 30       	cpi	r20, 0x08	; 8
 aa0:	51 05       	cpc	r21, r1
 aa2:	59 f0       	breq	.+22     	; 0xaba <__stack+0x25b>
 aa4:	fa 01       	movw	r30, r20
 aa6:	83 e0       	ldi	r24, 0x03	; 3
 aa8:	ee 0f       	add	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	8a 95       	dec	r24
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <__stack+0x249>
 ab0:	ee 0d       	add	r30, r14
 ab2:	ff 1d       	adc	r31, r15
 ab4:	20 e0       	ldi	r18, 0x00	; 0
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	d5 cf       	rjmp	.-86     	; 0xa64 <__stack+0x205>
			{
				if(dziewiec[i][k] != 0x00) dziewiec[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 aba:	6f 5f       	subi	r22, 0xFF	; 255
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	67 30       	cpi	r22, 0x07	; 7
 ac0:	71 05       	cpc	r23, r1
 ac2:	19 f0       	breq	.+6      	; 0xaca <__stack+0x26b>
 ac4:	40 e0       	ldi	r20, 0x00	; 0
 ac6:	50 e0       	ldi	r21, 0x00	; 0
 ac8:	ed cf       	rjmp	.-38     	; 0xaa4 <__stack+0x245>
	
	}}

	if (data == '9') {

	for(int p=0;p<8;p++)
 aca:	11 96       	adiw	r26, 0x01	; 1
 acc:	a8 30       	cpi	r26, 0x08	; 8
 ace:	b1 05       	cpc	r27, r1
 ad0:	59 f0       	breq	.+22     	; 0xae8 <__stack+0x289>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dziewiec[i][k] != 0x00) dziewiec[i][k]=1<<p;
 ad2:	c6 01       	movw	r24, r12
 ad4:	0a 2e       	mov	r0, r26
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <__stack+0x27d>
 ad8:	88 0f       	add	r24, r24
 ada:	99 1f       	adc	r25, r25
 adc:	0a 94       	dec	r0
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <__stack+0x279>
 ae0:	98 2f       	mov	r25, r24
 ae2:	40 e0       	ldi	r20, 0x00	; 0
 ae4:	50 e0       	ldi	r21, 0x00	; 0
 ae6:	b3 cf       	rjmp	.-154    	; 0xa4e <__stack+0x1ef>





}
 ae8:	c0 58       	subi	r28, 0x80	; 128
 aea:	dd 4f       	sbci	r29, 0xFD	; 253
 aec:	0f b6       	in	r0, 0x3f	; 63
 aee:	f8 94       	cli
 af0:	de bf       	out	0x3e, r29	; 62
 af2:	0f be       	out	0x3f, r0	; 63
 af4:	cd bf       	out	0x3d, r28	; 61
 af6:	cf 91       	pop	r28
 af8:	df 91       	pop	r29
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	ff 90       	pop	r15
 b00:	ef 90       	pop	r14
 b02:	df 90       	pop	r13
 b04:	cf 90       	pop	r12
 b06:	08 95       	ret

00000b08 <main>:

uint8_t byte;				// definicja zmiennej do SPI

int main(void)
{
	DDRC = 0xFF;
 b08:	9f ef       	ldi	r25, 0xFF	; 255
 b0a:	94 bb       	out	0x14, r25	; 20
	DDRB = 0xBF; // MISO jako wej?cie, reszta wyj?cia
 b0c:	8f eb       	ldi	r24, 0xBF	; 191
 b0e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 b10:	91 bb       	out	0x11, r25	; 17
	PORTC = 0x00; // Warstwy nie aktywne
 b12:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 b14:	12 ba       	out	0x12, r1	; 18
void USART_Init( uint16_t baud){  // inicjalizacja UART
	UBRRH = (uint16_t)(baud>>8);
 b16:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
 b18:	87 e6       	ldi	r24, 0x67	; 103
 b1a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 b1c:	88 e1       	ldi	r24, 0x18	; 24
 b1e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 b20:	86 e8       	ldi	r24, 0x86	; 134
 b22:	80 bd       	out	0x20, r24	; 32
static inline void SPI_SET_SS()		// ustawienie spi 
{
	PORTB|=(1<<PB4);
 b24:	c4 9a       	sbi	0x18, 4	; 24
}

void SPI_master_init()           // ustawienie spi 
{
	SPI_SET_SS();
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPI2X); // tryb master, CLK/2 (podwojna predkosc SPI)
 b26:	81 e5       	ldi	r24, 0x51	; 81
 b28:	8d b9       	out	0x0d, r24	; 13
	SPSR;
 b2a:	8e b1       	in	r24, 0x0e	; 14
	SPDR; // skasuj flage SPIF
 b2c:	8f b1       	in	r24, 0x0f	; 15
	
	USART_Init(MYUBRR);		// inicjacjia UART
	SPI_master_init();		// inicjacja SPI tryb master
	SPDR=0;					// bufor SPI = 0;
 b2e:	1f b8       	out	0x0f, r1	; 15
	UDR = buflen;
}
	
unsigned char USART_Receive( void ){ 	// odbieranie uart
    
	while( !(UCSRA & (1<<RXC)) );		
 b30:	5f 9b       	sbis	0x0b, 7	; 11
 b32:	fe cf       	rjmp	.-4      	; 0xb30 <main+0x28>
	return UDR; 
 b34:	8c b1       	in	r24, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {		// wysy³anie uart
	while( !(UCSRA & (1<<UDRE)) );
 b36:	5d 9b       	sbis	0x0b, 5	; 11
 b38:	fe cf       	rjmp	.-4      	; 0xb36 <main+0x2e>
	UDR = buflen;
 b3a:	8c b9       	out	0x0c, r24	; 12
	while(1)
	{
		data = USART_Receive();
		//if(data = "a") kostka();
		USART_Transmit(data);
		znak(data);
 b3c:	0e 94 7b 00 	call	0xf6	; 0xf6 <znak>
 b40:	f7 cf       	rjmp	.-18     	; 0xb30 <main+0x28>

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
