
ledcube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00000454  000004e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e0  008000e0  00000568  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b5  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000717  00000000  00000000  0000063d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021f  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000495  00000000  00000000  00001757  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3e       	cpi	r26, 0xE1	; 225
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0b 02 	call	0x416	; 0x416 <main>
  8a:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_master_init>:
static inline void SPI_SET_SS()		// ustawienie spi 
{
	PORTB|=(1<<PB4);
  92:	c4 9a       	sbi	0x18, 4	; 24
}

void SPI_master_init()           // ustawienie spi 
{
	SPI_SET_SS();
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPI2X); // tryb master, CLK/2 (podwojna predkosc SPI)
  94:	81 e5       	ldi	r24, 0x51	; 81
  96:	8d b9       	out	0x0d, r24	; 13
	SPSR;
  98:	8e b1       	in	r24, 0x0e	; 14
	SPDR; // skasuj flage SPIF
  9a:	8f b1       	in	r24, 0x0f	; 15
}
  9c:	08 95       	ret

0000009e <SPI_send>:

void SPI_send(uint8_t byte)			// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  9e:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  a0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
  a2:	77 9b       	sbis	0x0e, 7	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <SPI_send+0x4>
	PORTB|=_BV(PB4);
  a6:	c4 9a       	sbi	0x18, 4	; 24
}
  a8:	08 95       	ret

000000aa <SPI_send_no_latch>:

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  aa:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  ac:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <SPI_send_no_latch+0x4>
	
}
  b2:	08 95       	ret

000000b4 <zatrzask>:

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
  b4:	c4 9a       	sbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <zatrzask+0x6>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
  be:	c4 98       	cbi	0x18, 4	; 24
}
  c0:	08 95       	ret

000000c2 <shift_reset>:

void shift_reset()   // ustawienie spi 
{
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
  c6:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
  c8:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & _BV(SPIF)));
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <shift_reset+0x8>
	PORTB&=~(_BV(PB4));
}

void shift_reset()   // ustawienie spi 
{
	for(int i=0;i<8;i++)
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	88 30       	cpi	r24, 0x08	; 8
  d2:	91 05       	cpc	r25, r1
  d4:	c1 f7       	brne	.-16     	; 0xc6 <shift_reset+0x4>
	{
		SPI_send_no_latch(0x00);
	}
}
  d6:	08 95       	ret

000000d8 <USART_Init>:
void USART_Init( uint16_t baud){  // inicjalizacja UART
	UBRRH = (uint16_t)(baud>>8);
  d8:	90 bd       	out	0x20, r25	; 32
	UBRRL = (uint16_t)baud;
  da:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  e0:	86 e8       	ldi	r24, 0x86	; 134
  e2:	80 bd       	out	0x20, r24	; 32
}
  e4:	08 95       	ret

000000e6 <USART_Transmit>:

void USART_Transmit( char buflen) {		// wysy³anie uart
	while( !(UCSRA & (1<<UDRE)) );
  e6:	5d 9b       	sbis	0x0b, 5	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <USART_Transmit>
	UDR = buflen;
  ea:	8c b9       	out	0x0c, r24	; 12
}
  ec:	08 95       	ret

000000ee <USART_Receive>:
	
unsigned char USART_Receive( void ){ 	// odbieranie uart
    
	while( !(UCSRA & (1<<RXC)) );		
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <USART_Receive>
	return UDR; 
  f2:	8c b1       	in	r24, 0x0c	; 12
}
  f4:	08 95       	ret

000000f6 <znak>:
void znak(char data)
{
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	c0 5c       	subi	r28, 0xC0	; 192
 10c:	d0 40       	sbci	r29, 0x00	; 0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
	{0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 118:	de 01       	movw	r26, r28
 11a:	af 5b       	subi	r26, 0xBF	; 191
 11c:	bf 4f       	sbci	r27, 0xFF	; 255
 11e:	e0 ea       	ldi	r30, 0xA0	; 160
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 e4       	ldi	r25, 0x40	; 64
 124:	01 90       	ld	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	91 50       	subi	r25, 0x01	; 1
 12a:	e1 f7       	brne	.-8      	; 0x124 <znak+0x2e>
	{0x00,0x01,0x00,0x00,0x00,0x00,0xC0,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00}};
 12c:	de 01       	movw	r26, r28
 12e:	af 57       	subi	r26, 0x7F	; 127
 130:	bf 4f       	sbci	r27, 0xFF	; 255
 132:	e0 e6       	ldi	r30, 0x60	; 96
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	90 e4       	ldi	r25, 0x40	; 64
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	e1 f7       	brne	.-8      	; 0x138 <znak+0x42>
	{0x00,0x01,0x00,0x00,0x00,0x00,0x01,0x00},
	{0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00}};

	int czas=1;
	int petla = 7;
	if (data == '1') {
 140:	81 33       	cpi	r24, 0x31	; 49
 142:	09 f0       	breq	.+2      	; 0x146 <znak+0x50>
 144:	7b c0       	rjmp	.+246    	; 0x23c <znak+0x146>
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x01,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00}};
 146:	fe 01       	movw	r30, r28
 148:	31 96       	adiw	r30, 0x01	; 1
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	df 01       	movw	r26, r30
 14e:	1d 92       	st	X+, r1
 150:	8a 95       	dec	r24
 152:	e9 f7       	brne	.-6      	; 0x14e <znak+0x58>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8c 83       	std	Y+4, r24	; 0x04
 158:	8c 87       	std	Y+12, r24	; 0x0c
 15a:	8c 8b       	std	Y+20, r24	; 0x14
 15c:	8c 8f       	std	Y+28, r24	; 0x1c
 15e:	8c a3       	std	Y+36, r24	; 0x24
 160:	8c a7       	std	Y+44, r24	; 0x2c
 162:	8e a7       	std	Y+46, r24	; 0x2e
 164:	8c ab       	std	Y+52, r24	; 0x34
 166:	8d ab       	std	Y+53, r24	; 0x35
 168:	8c af       	std	Y+60, r24	; 0x3c
 16a:	00 e0       	ldi	r16, 0x00	; 0
 16c:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 16e:	31 e0       	ldi	r19, 0x01	; 1
 170:	c3 2e       	mov	r12, r19
 172:	d1 2c       	mov	r13, r1
	int petla = 7;
	if (data == '1') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 174:	7f 01       	movw	r14, r30
 176:	e0 ea       	ldi	r30, 0xA0	; 160
 178:	ff e0       	ldi	r31, 0x0F	; 15
 17a:	55 c0       	rjmp	.+170    	; 0x226 <znak+0x130>
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 17c:	8c 91       	ld	r24, X
 17e:	81 11       	cpse	r24, r1
 180:	9c 93       	st	X, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	28 30       	cpi	r18, 0x08	; 8
 18a:	31 05       	cpc	r19, r1
 18c:	b9 f7       	brne	.-18     	; 0x17c <znak+0x86>
	int petla = 7;
	if (data == '1') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 18e:	4f 5f       	subi	r20, 0xFF	; 255
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	48 30       	cpi	r20, 0x08	; 8
 194:	51 05       	cpc	r21, r1
 196:	19 f4       	brne	.+6      	; 0x19e <znak+0xa8>
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	3b c0       	rjmp	.+118    	; 0x214 <znak+0x11e>
 19e:	da 01       	movw	r26, r20
 1a0:	23 e0       	ldi	r18, 0x03	; 3
 1a2:	aa 0f       	add	r26, r26
 1a4:	bb 1f       	adc	r27, r27
 1a6:	2a 95       	dec	r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <znak+0xac>
 1aa:	ae 0d       	add	r26, r14
 1ac:	bf 1d       	adc	r27, r15
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	e4 cf       	rjmp	.-56     	; 0x17c <znak+0x86>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(jeden[i][k]);
 1b4:	8c 91       	ld	r24, X
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 1b6:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 1b8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 1ba:	77 9b       	sbis	0x0e, 7	; 14
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <znak+0xc4>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	11 96       	adiw	r26, 0x01	; 1
 1c4:	28 30       	cpi	r18, 0x08	; 8
 1c6:	31 05       	cpc	r19, r1
 1c8:	a9 f7       	brne	.-22     	; 0x1b4 <znak+0xbe>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 1ca:	c4 9a       	sbi	0x18, 4	; 24
 1cc:	cf 01       	movw	r24, r30
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <znak+0xd8>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 1d2:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(jeden[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 1d4:	c6 01       	movw	r24, r12
 1d6:	04 2e       	mov	r0, r20
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <znak+0xe8>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <znak+0xe4>
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	cf 01       	movw	r24, r30
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <znak+0xf0>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	48 30       	cpi	r20, 0x08	; 8
 1f0:	51 05       	cpc	r21, r1
 1f2:	59 f0       	breq	.+22     	; 0x20a <znak+0x114>
 1f4:	da 01       	movw	r26, r20
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	aa 0f       	add	r26, r26
 1fa:	bb 1f       	adc	r27, r27
 1fc:	8a 95       	dec	r24
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <znak+0x102>
 200:	ae 0d       	add	r26, r14
 202:	bf 1d       	adc	r27, r15
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	d5 cf       	rjmp	.-86     	; 0x1b4 <znak+0xbe>
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 20a:	6f 5f       	subi	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	67 30       	cpi	r22, 0x07	; 7
 210:	71 05       	cpc	r23, r1
 212:	19 f0       	breq	.+6      	; 0x21a <znak+0x124>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	ed cf       	rjmp	.-38     	; 0x1f4 <znak+0xfe>

	int czas=1;
	int petla = 7;
	if (data == '1') {

	for(int p=0;p<8;p++)
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	1f 4f       	sbci	r17, 0xFF	; 255
 21e:	08 30       	cpi	r16, 0x08	; 8
 220:	11 05       	cpc	r17, r1
 222:	09 f4       	brne	.+2      	; 0x226 <znak+0x130>
 224:	e8 c0       	rjmp	.+464    	; 0x3f6 <znak+0x300>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(jeden[i][k] != 0x00) jeden[i][k]=1<<p;
 226:	c6 01       	movw	r24, r12
 228:	00 2e       	mov	r0, r16
 22a:	02 c0       	rjmp	.+4      	; 0x230 <znak+0x13a>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <znak+0x136>
 234:	98 2f       	mov	r25, r24
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	b1 cf       	rjmp	.-158    	; 0x19e <znak+0xa8>
			}
		}
	
	}}

	if (data == '2') {
 23c:	82 33       	cpi	r24, 0x32	; 50
 23e:	09 f0       	breq	.+2      	; 0x242 <znak+0x14c>
 240:	6c c0       	rjmp	.+216    	; 0x31a <znak+0x224>
 242:	a0 e0       	ldi	r26, 0x00	; 0
 244:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	c4 2e       	mov	r12, r20
 24a:	d1 2c       	mov	r13, r1

	if (data == '2') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 24c:	31 e4       	ldi	r19, 0x41	; 65
 24e:	e3 2e       	mov	r14, r19
 250:	f1 2c       	mov	r15, r1
 252:	ec 0e       	add	r14, r28
 254:	fd 1e       	adc	r15, r29
 256:	00 ea       	ldi	r16, 0xA0	; 160
 258:	1f e0       	ldi	r17, 0x0F	; 15
 25a:	54 c0       	rjmp	.+168    	; 0x304 <znak+0x20e>
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 25c:	80 81       	ld	r24, Z
 25e:	81 11       	cpse	r24, r1
 260:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	31 96       	adiw	r30, 0x01	; 1
 268:	28 30       	cpi	r18, 0x08	; 8
 26a:	31 05       	cpc	r19, r1
 26c:	b9 f7       	brne	.-18     	; 0x25c <znak+0x166>

	if (data == '2') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 26e:	4f 5f       	subi	r20, 0xFF	; 255
 270:	5f 4f       	sbci	r21, 0xFF	; 255
 272:	48 30       	cpi	r20, 0x08	; 8
 274:	51 05       	cpc	r21, r1
 276:	19 f4       	brne	.+6      	; 0x27e <znak+0x188>
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	3b c0       	rjmp	.+118    	; 0x2f4 <znak+0x1fe>
 27e:	fa 01       	movw	r30, r20
 280:	23 e0       	ldi	r18, 0x03	; 3
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	2a 95       	dec	r18
 288:	e1 f7       	brne	.-8      	; 0x282 <znak+0x18c>
 28a:	ee 0d       	add	r30, r14
 28c:	ff 1d       	adc	r31, r15
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	e4 cf       	rjmp	.-56     	; 0x25c <znak+0x166>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(dwa[i][k]);
 294:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 296:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 298:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 29a:	77 9b       	sbis	0x0e, 7	; 14
 29c:	fe cf       	rjmp	.-4      	; 0x29a <znak+0x1a4>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
 2a2:	31 96       	adiw	r30, 0x01	; 1
 2a4:	28 30       	cpi	r18, 0x08	; 8
 2a6:	31 05       	cpc	r19, r1
 2a8:	a9 f7       	brne	.-22     	; 0x294 <znak+0x19e>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 2aa:	c4 9a       	sbi	0x18, 4	; 24
 2ac:	c8 01       	movw	r24, r16
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <znak+0x1b8>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 2b2:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(dwa[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 2b4:	c6 01       	movw	r24, r12
 2b6:	04 2e       	mov	r0, r20
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <znak+0x1c8>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	0a 94       	dec	r0
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <znak+0x1c4>
 2c2:	85 bb       	out	0x15, r24	; 21
 2c4:	c8 01       	movw	r24, r16
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <znak+0x1d0>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 2ca:	4f 5f       	subi	r20, 0xFF	; 255
 2cc:	5f 4f       	sbci	r21, 0xFF	; 255
 2ce:	48 30       	cpi	r20, 0x08	; 8
 2d0:	51 05       	cpc	r21, r1
 2d2:	59 f0       	breq	.+22     	; 0x2ea <znak+0x1f4>
 2d4:	fa 01       	movw	r30, r20
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	ee 0f       	add	r30, r30
 2da:	ff 1f       	adc	r31, r31
 2dc:	8a 95       	dec	r24
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <znak+0x1e2>
 2e0:	ee 0d       	add	r30, r14
 2e2:	ff 1d       	adc	r31, r15
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	d5 cf       	rjmp	.-86     	; 0x294 <znak+0x19e>
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	67 30       	cpi	r22, 0x07	; 7
 2f0:	71 05       	cpc	r23, r1
 2f2:	19 f0       	breq	.+6      	; 0x2fa <znak+0x204>
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	ed cf       	rjmp	.-38     	; 0x2d4 <znak+0x1de>
	
	}}

	if (data == '2') {

	for(int p=0;p<8;p++)
 2fa:	11 96       	adiw	r26, 0x01	; 1
 2fc:	a8 30       	cpi	r26, 0x08	; 8
 2fe:	b1 05       	cpc	r27, r1
 300:	09 f4       	brne	.+2      	; 0x304 <znak+0x20e>
 302:	79 c0       	rjmp	.+242    	; 0x3f6 <znak+0x300>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(dwa[i][k] != 0x00) dwa[i][k]=1<<p;
 304:	c6 01       	movw	r24, r12
 306:	0a 2e       	mov	r0, r26
 308:	02 c0       	rjmp	.+4      	; 0x30e <znak+0x218>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <znak+0x214>
 312:	98 2f       	mov	r25, r24
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	b2 cf       	rjmp	.-156    	; 0x27e <znak+0x188>
			}
		}
	
	}}

	if (data == '3') {
 31a:	83 33       	cpi	r24, 0x33	; 51
 31c:	09 f0       	breq	.+2      	; 0x320 <znak+0x22a>
 31e:	6b c0       	rjmp	.+214    	; 0x3f6 <znak+0x300>
 320:	a0 e0       	ldi	r26, 0x00	; 0
 322:	b0 e0       	ldi	r27, 0x00	; 0
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	c4 2e       	mov	r12, r20
 328:	d1 2c       	mov	r13, r1

	if (data == '3') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 32a:	31 e8       	ldi	r19, 0x81	; 129
 32c:	e3 2e       	mov	r14, r19
 32e:	f1 2c       	mov	r15, r1
 330:	ec 0e       	add	r14, r28
 332:	fd 1e       	adc	r15, r29
 334:	00 ea       	ldi	r16, 0xA0	; 160
 336:	1f e0       	ldi	r17, 0x0F	; 15
 338:	53 c0       	rjmp	.+166    	; 0x3e0 <znak+0x2ea>
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 33a:	80 81       	ld	r24, Z
 33c:	81 11       	cpse	r24, r1
 33e:	90 83       	st	Z, r25

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
 340:	2f 5f       	subi	r18, 0xFF	; 255
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	31 96       	adiw	r30, 0x01	; 1
 346:	28 30       	cpi	r18, 0x08	; 8
 348:	31 05       	cpc	r19, r1
 34a:	b9 f7       	brne	.-18     	; 0x33a <znak+0x244>

	if (data == '3') {

	for(int p=0;p<8;p++)
	{
		for(int i=0;i<8;i++)
 34c:	4f 5f       	subi	r20, 0xFF	; 255
 34e:	5f 4f       	sbci	r21, 0xFF	; 255
 350:	48 30       	cpi	r20, 0x08	; 8
 352:	51 05       	cpc	r21, r1
 354:	19 f4       	brne	.+6      	; 0x35c <znak+0x266>
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	3b c0       	rjmp	.+118    	; 0x3d2 <znak+0x2dc>
 35c:	fa 01       	movw	r30, r20
 35e:	23 e0       	ldi	r18, 0x03	; 3
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	2a 95       	dec	r18
 366:	e1 f7       	brne	.-8      	; 0x360 <znak+0x26a>
 368:	ee 0d       	add	r30, r14
 36a:	ff 1d       	adc	r31, r15
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	e4 cf       	rjmp	.-56     	; 0x33a <znak+0x244>
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
				{
					SPI_send_no_latch(trzy[i][k]);
 372:	80 81       	ld	r24, Z
	PORTB|=_BV(PB4);
}

void SPI_send_no_latch(uint8_t byte)		// ustawienie spi 
{
	PORTB&=~(_BV(PB4));
 374:	c4 98       	cbi	0x18, 4	; 24
	SPDR=byte;
 376:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & _BV(SPIF)));
 378:	77 9b       	sbis	0x0e, 7	; 14
 37a:	fe cf       	rjmp	.-4      	; 0x378 <znak+0x282>

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
			{
				for(int k=0;k<8;k++)
 37c:	2f 5f       	subi	r18, 0xFF	; 255
 37e:	3f 4f       	sbci	r19, 0xFF	; 255
 380:	31 96       	adiw	r30, 0x01	; 1
 382:	28 30       	cpi	r18, 0x08	; 8
 384:	31 05       	cpc	r19, r1
 386:	a9 f7       	brne	.-22     	; 0x372 <znak+0x27c>
	
}

void zatrzask() 	// ustawienie spi 
{
	PORTB|=_BV(PB4);
 388:	c4 9a       	sbi	0x18, 4	; 24
 38a:	c8 01       	movw	r24, r16
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <znak+0x296>
	_delay_ms(1);
	PORTB&=~(_BV(PB4));
 390:	c4 98       	cbi	0x18, 4	; 24
				{
					SPI_send_no_latch(trzy[i][k]);
				}
				zatrzask();
				PORTC = 1<<i;
 392:	c6 01       	movw	r24, r12
 394:	04 2e       	mov	r0, r20
 396:	02 c0       	rjmp	.+4      	; 0x39c <znak+0x2a6>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <znak+0x2a2>
 3a0:	85 bb       	out	0x15, r24	; 21
 3a2:	c8 01       	movw	r24, r16
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <znak+0x2ae>
			}
		}

		for(int ii=0;ii<petla;ii++)
		{
			for(int i=0;i<8;i++)
 3a8:	4f 5f       	subi	r20, 0xFF	; 255
 3aa:	5f 4f       	sbci	r21, 0xFF	; 255
 3ac:	48 30       	cpi	r20, 0x08	; 8
 3ae:	51 05       	cpc	r21, r1
 3b0:	59 f0       	breq	.+22     	; 0x3c8 <znak+0x2d2>
 3b2:	fa 01       	movw	r30, r20
 3b4:	83 e0       	ldi	r24, 0x03	; 3
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	8a 95       	dec	r24
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <znak+0x2c0>
 3be:	ee 0d       	add	r30, r14
 3c0:	ff 1d       	adc	r31, r15
 3c2:	20 e0       	ldi	r18, 0x00	; 0
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	d5 cf       	rjmp	.-86     	; 0x372 <znak+0x27c>
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
			}
		}

		for(int ii=0;ii<petla;ii++)
 3c8:	6f 5f       	subi	r22, 0xFF	; 255
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	67 30       	cpi	r22, 0x07	; 7
 3ce:	71 05       	cpc	r23, r1
 3d0:	19 f0       	breq	.+6      	; 0x3d8 <znak+0x2e2>
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	ed cf       	rjmp	.-38     	; 0x3b2 <znak+0x2bc>
	
	}}

	if (data == '3') {

	for(int p=0;p<8;p++)
 3d8:	11 96       	adiw	r26, 0x01	; 1
 3da:	a8 30       	cpi	r26, 0x08	; 8
 3dc:	b1 05       	cpc	r27, r1
 3de:	59 f0       	breq	.+22     	; 0x3f6 <znak+0x300>
	{
		for(int i=0;i<8;i++)
		{
			for(int k=0;k<8;k++)
			{
				if(trzy[i][k] != 0x00) trzy[i][k]=1<<p;
 3e0:	c6 01       	movw	r24, r12
 3e2:	0a 2e       	mov	r0, r26
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <znak+0x2f4>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <znak+0x2f0>
 3ee:	98 2f       	mov	r25, r24
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	b3 cf       	rjmp	.-154    	; 0x35c <znak+0x266>
			}
		}
	
	}}

}
 3f6:	c0 54       	subi	r28, 0x40	; 64
 3f8:	df 4f       	sbci	r29, 0xFF	; 255
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	08 95       	ret

00000416 <main>:

uint8_t byte;				// definicja zmiennej do SPI

int main(void)
{
	DDRC = 0xFF;
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	94 bb       	out	0x14, r25	; 20
	DDRB = 0xBF; // MISO jako wej?cie, reszta wyj?cia
 41a:	8f eb       	ldi	r24, 0xBF	; 191
 41c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 41e:	91 bb       	out	0x11, r25	; 17
	PORTC = 0x00; // Warstwy nie aktywne
 420:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 422:	12 ba       	out	0x12, r1	; 18
void USART_Init( uint16_t baud){  // inicjalizacja UART
	UBRRH = (uint16_t)(baud>>8);
 424:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint16_t)baud;
 426:	87 e6       	ldi	r24, 0x67	; 103
 428:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 42a:	88 e1       	ldi	r24, 0x18	; 24
 42c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 42e:	86 e8       	ldi	r24, 0x86	; 134
 430:	80 bd       	out	0x20, r24	; 32
static inline void SPI_SET_SS()		// ustawienie spi 
{
	PORTB|=(1<<PB4);
 432:	c4 9a       	sbi	0x18, 4	; 24
}

void SPI_master_init()           // ustawienie spi 
{
	SPI_SET_SS();
	SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPI2X); // tryb master, CLK/2 (podwojna predkosc SPI)
 434:	81 e5       	ldi	r24, 0x51	; 81
 436:	8d b9       	out	0x0d, r24	; 13
	SPSR;
 438:	8e b1       	in	r24, 0x0e	; 14
	SPDR; // skasuj flage SPIF
 43a:	8f b1       	in	r24, 0x0f	; 15
	
	USART_Init(MYUBRR);		// inicjacjia UART
	SPI_master_init();		// inicjacja SPI tryb master
	SPDR=0;					// bufor SPI = 0;
 43c:	1f b8       	out	0x0f, r1	; 15
	UDR = buflen;
}
	
unsigned char USART_Receive( void ){ 	// odbieranie uart
    
	while( !(UCSRA & (1<<RXC)) );		
 43e:	5f 9b       	sbis	0x0b, 7	; 11
 440:	fe cf       	rjmp	.-4      	; 0x43e <main+0x28>
	return UDR; 
 442:	8c b1       	in	r24, 0x0c	; 12
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
}

void USART_Transmit( char buflen) {		// wysy³anie uart
	while( !(UCSRA & (1<<UDRE)) );
 444:	5d 9b       	sbis	0x0b, 5	; 11
 446:	fe cf       	rjmp	.-4      	; 0x444 <main+0x2e>
	UDR = buflen;
 448:	8c b9       	out	0x0c, r24	; 12
	while(1)
	{
		data = USART_Receive();
		//if(data = "a") kostka();
		USART_Transmit(data);
		znak(data);
 44a:	0e 94 7b 00 	call	0xf6	; 0xf6 <znak>
 44e:	f7 cf       	rjmp	.-18     	; 0x43e <main+0x28>

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
